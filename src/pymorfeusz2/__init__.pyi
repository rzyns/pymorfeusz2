# type: ignore
import sys
from typing import Literal, List, Any, Optional, Tuple, Dict
import enum

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# <litgen_stub> // Autogenerated code below! Do not edit!
####################    <generated_from:morfeusz2.h>    ####################
#
# * File:   morfeusz2.h
# * Author: mlenart
# *
# * Created on 13 czerwiec 2014, 17:28
#

# #ifndef MORFEUSZ2_H
#





class Charset(enum.Enum):
    utf8 = enum.auto()      # (= 11)
    iso8859_2 = enum.auto() # (= 12)
    cp1250 = enum.auto()    # (= 13)
    cp852 = enum.auto()     # (= 14)

class TokenNumbering(enum.Enum):
    #*
    #         * Start from 0. Reset counter for every invocation of Morfeusz::analyze (this is default)
    #
    separate_numbering = enum.auto()   # (= 201)

    #*
    #         * Also start from 0. Reset counter for every invocation of Morfeusz::setTokenNumbering only
    #
    continuous_numbering = enum.auto() # (= 202)

class CaseHandling(enum.Enum):
    #*
    #         * Case-sensitive but allows interpretations that do not match case but there are no alternatives (this is default)
    #
    conditionally_case_sensitive = enum.auto() # (= 100)

    #*
    #         * Strictly case-sensitive, reject all interpretations that do not match case
    #
    strictly_case_sensitive = enum.auto()      # (= 101)

    #*
    #         * Case-insensitive - ignores case
    #
    ignore_case = enum.auto()                  # (= 102)

class WhitespaceHandling(enum.Enum):
    #*
    #         * Ignore whitespaces (this is default)
    #
    skip_whitespaces = enum.auto()   # (= 301)

    #*
    #         * Append whitespaces to previous MorphInterpretation
    #
    append_whitespaces = enum.auto() # (= 302)

    #*
    #         * Whitespaces are separate MorphInterpretation objects
    #
    keep_whitespaces = enum.auto()   # (= 303)

class MorfeuszUsage(enum.Enum):
    analyse_only = enum.auto()              # (= 401)
    generate_only = enum.auto()             # (= 402)
    both_analyse_and_generate = enum.auto() # (= 403)

class Morfeusz:
    """*
         * Performs morphological analysis (analyze methods) and syntesis (generate methods).
         *
         * It is NOT thread-safe
         * but it is possible to use separate Morfeusz instance for each concurrent thread.

    """

    @staticmethod
    def get_version() -> str:
        """*
                 * Returns a string containing library version.
                 * @return

        """
        pass

    @staticmethod
    def get_default_dict_name() -> str:
        """*
                 * Returns a string containing default dictionary name.
                 * @return

        """
        pass

    @staticmethod
    def get_copyright() -> str:
        """*
                 * Returns morfeusz2 library copyright text.
                 * @return

        """
        pass

    @staticmethod
    @overload
    def create_instance(usage: MorfeuszUsage = BOTH_ANALYSE_AND_GENERATE) -> Morfeusz:
        """*
                 * Creates actual instance of Morfeusz class.
                 * The caller is responsible for destroying it.
                 *
                 * @remarks NOT THREAD-SAFE (affects ALL Morfeusz instances)
                 * @return new instance of Morfeusz.

        """
        pass

    @staticmethod
    @overload
    def create_instance(
        dict_name: str,
        usage: MorfeuszUsage = BOTH_ANALYSE_AND_GENERATE
        ) -> Morfeusz:
        """*
                 * Creates actual instance of Morfeusz class with possibly non-default dictionary.
                 * The caller is responsible for destroying it.
                 *
                 * @remarks NOT THREAD-SAFE (affects ALL Morfeusz instances)
                 * @return new instance of Morfeusz.

        """
        pass

    def get_dict_id(self) -> str:                            # overridable (pure virtual)
        """*
                 * Returns current dictionary ID.
                 *
                 * @return dictionary ID string

        """
        pass

    def get_dict_copyright(self) -> str:                     # overridable (pure virtual)
        """*
                 * Returns current dictionary copyright string.
                 *
                 * @return dictionary copyright string

        """
        pass

    def clone(self) -> Morfeusz:                             # overridable (pure virtual)
        """*
                 * Creates exact copy of Morfeusz object.
                 *
                 * @remarks NOT THREAD-SAFE (must have exclusive access to this instance. Does not affect other Morfeusz instances).

        """
        pass


    @overload
    def analyse(self, text: str) -> ResultsIterator:         # overridable (pure virtual)
        """*
                 * Analyze given text and return the results as iterator.
                 * Use this method for analysis of big texts.
                 * Copies the text under the hood - use analyze(const char*) if you want to avoid this.
                 *
                 * @param text - text for morphological analysis.
                 * @remarks NOT THREAD-SAFE (must have exclusive access to this instance. Does not affect other Morfeusz instances).
                 * @return - iterator over morphological analysis results

        """
        pass

    @overload
    def analyse(self, text: str) -> ResultsIterator:         # overridable (pure virtual)
        """*
                 * Analyze given text and return the results as iterator.
                 * It does not store results for whole text at once, so may be less memory-consuming for analysis of big texts
                 *
                 *
                 * @param text - text for morphological analysis. This pointer must not be deleted before returned ResultsIterator object.
                 * @remarks NOT THREAD-SAFE (must have exclusive access to this instance. Does not affect other Morfeusz instances).
                 * @return - iterator over morphological analysis results

        """
        pass

    @overload
    def analyse(                                             # overridable (pure virtual)
        self,
        text: str,
        result: List[MorphInterpretation]
        ) -> None:
        """*
                 * Perform morphological analysis on a given text and put results in a vector.
                 *
                 * @param text - text to be analyzed
                 * @param result - results vector
                 * @remarks NOT THREAD-SAFE (must have exclusive access to this instance. Does not affect other Morfeusz instances).

        """
        pass

    @overload
    def generate(                                            # overridable (pure virtual)
        self,
        lemma: str,
        result: List[MorphInterpretation]
        ) -> None:
        """*
                 * Perform morphological synthesis on a given lemma and put results in a vector.
                 *
                 * @param lemma - lemma to be analyzed
                 * @param result - results vector
                 * @remarks NOT THREAD-SAFE (must have exclusive access to this instance. Does not affect other Morfeusz instances).
                 * @throws MorfeuszException - when lemma parameter contains whitespaces.

        """
        pass

    @overload
    def generate(                                            # overridable (pure virtual)
        self,
        lemma: str,
        tag_id: int,
        result: List[MorphInterpretation]
        ) -> None:
        """*
                 * Perform morphological synthesis on a given lemma and put results in a vector.
                 * Limit results to interpretations with the specified tag.
                 *
                 * @param lemma - lemma to be analyzed
                 * @param tag - tag of result interpretations
                 * @param result - results vector
                 * @remarks NOT THREAD-SAFE (must have exclusive access to this instance. Does not affect other Morfeusz instances).
                 * @throws MorfeuszException - when lemma parameter contains whitespaces or tagId is outside tagset.

        """
        pass

    def set_charset(self, encoding: Charset) -> None:        # overridable (pure virtual)
        """*
                 * Set encoding for input and output string objects.
                 *
                 * @param encoding
                 * @remarks NOT THREAD-SAFE (must have exclusive access to this instance. Does not affect other Morfeusz instances).

        """
        pass

    def get_charset(self) -> Charset:                        # overridable (pure virtual)
        """*
                 * Get charset used for input and output string objects.
                 * @return

        """
        pass

    def set_aggl(self, aggl: str) -> None:                   # overridable (pure virtual)
        """*
                 * Select agglutination rules.
                 *
                 * @param aggl
                 * @remarks NOT THREAD-SAFE (must have exclusive access to this instance. Does not affect other Morfeusz instances).
                 * @throws MorfeuszException - for invalid aggl parameter.

        """
        pass

    def get_aggl(self) -> str:                               # overridable (pure virtual)
        """*
                 * Get current agglutination rules option
                 * @return

        """
        pass

    def set_praet(self, praet: str) -> None:                 # overridable (pure virtual)
        """*
                 * Select past tense segmentation
                 *
                 * @param praet
                 * @remarks NOT THREAD-SAFE (must have exclusive access to this instance. Does not affect other Morfeusz instances).
                 * @throws MorfeuszException - for invalid aggl praet parameter.

        """
        pass

    def get_praet(self) -> str:                              # overridable (pure virtual)
        """*
                 * Get current past tense segmentation option
                 * @return

        """
        pass

    def set_case_handling(                                   # overridable (pure virtual)
        self,
        case_handling: CaseHandling
        ) -> None:
        """*
                 * Set case handling.
                 *
                 * @param caseSensitive
                 * @remarks NOT THREAD-SAFE (must have exclusive access to this instance. Does not affect other Morfeusz instances).

        """
        pass

    def get_case_handling(self) -> CaseHandling:             # overridable (pure virtual)
        """*
                 * Get case handling policy.
                 * @return

        """
        pass

    def set_token_numbering(                                 # overridable (pure virtual)
        self,
        numbering: TokenNumbering
        ) -> None:
        """*
                 * Set token numbering policy.
                 *
                 * @param numbering
                 * @remarks NOT THREAD-SAFE (must have exclusive access to this instance. Does not affect other Morfeusz instances).

        """
        pass

    def get_token_numbering(self) -> TokenNumbering:         # overridable (pure virtual)
        """*
                 * Get token numbering policy.
                 * @return

        """
        pass

    def set_whitespace_handling(                             # overridable (pure virtual)
        self,
        whitespace_handling: WhitespaceHandling
        ) -> None:
        """*
                 * Set whitespace handling.
                 *
                 * @param numbering
                 * @remarks NOT THREAD-SAFE (must have exclusive access to this instance. Does not affect other Morfeusz instances).

        """
        pass

    def get_whitespace_handling(self) -> WhitespaceHandling: # overridable (pure virtual)
        """*
                 * Get whitespace handling.
                 * @return

        """
        pass

    def set_debug(self, debug: bool) -> None:                # overridable (pure virtual)
        """*
                 * Set debug option value.
                 *
                 * @param debug

        """
        pass

    def get_id_resolver(self) -> IdResolver:                 # overridable (pure virtual)
        """*
                 * Get reference to tagset currently being in use.
                 *
                 * @return currently used tagset

        """
        pass

    def set_dictionary(self, dict_name: str) -> None:        # overridable (pure virtual)
        """*
                 * Set current dictionary to the one with provided name.
                 *
                 * This is NOT THREAD SAFE - no other thread may invoke setDictionary
                 * either within this instance, or any other in the same application.
                 *
                 * @param dictName dictionary name
                 * @remarks NOT THREAD-SAFE (affects ALL Morfeusz instances)
                 * @throws MorfeuszException - when dictionary not found.
                 * @throws std::ios_base::failure - when IO error occurred when loading given dictionary.

        """
        pass

    #*
    #         * List of paths where current Morfeusz instance will look for dictionaries.
    #         * Modifying it is NOT THREAD-SAFE.
    #
    dictionary_search_paths: std.list<str>                   # (C++ static member)

    def get_available_aggl_options(self) -> std.set<str>:    # overridable (pure virtual)
        """*
                 * Get available parameters for "setAggl" method.
                 * @return

        """
        pass

    def get_available_praet_options(self) -> std.set<str>:   # overridable (pure virtual)
        """*
                 * Get available parameters for "setPraet" method.
                 * @return

        """
        pass

    def __init__(self) -> None:
        """Autogenerated default constructor"""
        pass

class ResultsIterator:
    def has_next(self) -> bool:            # overridable (pure virtual)
        """*
                 *
                 * @return True iff this iterator contains more elements.

        """
        pass

    def peek(self) -> MorphInterpretation: # overridable (pure virtual)
        """*
                 *
                 * @return the element, that will be returned in next next() invocation.
                 * @throws std::out_of_range when this iterator has already reached the end.

        """
        pass

    def next(self) -> MorphInterpretation: # overridable (pure virtual)
        """*
                 *
                 * @return next analysis result.
                 * @throws std::out_of_range when this iterator has already reached the end.

        """
        pass

    def __init__(self) -> None:
        """Autogenerated default constructor"""
        pass

class IdResolver:
    """*
         * Represents mappings for tags, names and labels.

    """

    def get_tagset_id(self) -> str:                        # overridable (pure virtual)
        """*
                 * Returns current TAGSET-ID (as specified in first line of tagset file)
                 *
                 * @return tagset id string

        """
        pass

    def get_tag(self, tag_id: int) -> str:                 # overridable (pure virtual)
        """*
                 * Returns tag (denoted by its index).
                 *
                 * @param tagNum - tag index in the tagset.
                 * @return - the tag
                 * @throws std::out_of_range when invalid tagId is provided.

        """
        pass

    def get_tag_id(self, tag: str) -> int:                 # overridable (pure virtual)
        """*
                 * Returns identifier for given tag.
                 * Throws MorfeuszException when none exists.
                 *
                 * @return identifier for given tag
                 * @throws MorfeuszException when invalid tag parameter is provided.

        """
        pass

    def get_name(self, name_id: int) -> str:               # overridable (pure virtual)
        """*
                 * Returns named entity type (denoted by its index).
                 *
                 * @param nameNum - name index in the tagset.
                 * @return - the named entity type
                 * @throws std::out_of_range when invalid nameId is provided.

        """
        pass

    def get_name_id(self, name: str) -> int:               # overridable (pure virtual)
        """*
                 * Returns identifier for given named entity.
                 * Throws MorfeuszException when none exists.
                 *
                 * @return identifier for given named entity
                 * @throws MorfeuszException when invalid name parameter is provided.

        """
        pass

    def get_labels_as_string(self, labels_id: int) -> str: # overridable (pure virtual)
        """*
                 * Returns labels string for given labelsId.
                 *
                 * @param labelsId
                 * @return labels as string
                 * @throws std::out_of_range when invalid labelsId is provided.

        """
        pass

    def get_labels(self, labels_id: int) -> std.set<str>:  # overridable (pure virtual)
        """*
                 * Returns labels as set of strings for given labelsId.
                 * @param labelsId
                 * @return labels as set of strings
                 * @throws std::out_of_range when invalid labelsId is provided.

        """
        pass

    def get_labels_id(self, labels_str: str) -> int:       # overridable (pure virtual)
        """*
                 * Get labelsId for given labels as string.
                 *
                 * @param labelsStr
                 * @return labelsId
                 * @throws MorfeuszException when invalid tag is provided.

        """
        pass

    def get_tags_count(self) -> int:                       # overridable (pure virtual)
        """*
                 * Returns number of tags this tagset contains.
                 *
                 * @return

        """
        pass

    def get_names_count(self) -> int:                      # overridable (pure virtual)
        """*
                 * Returns number of named entity types this tagset contains.
                 *
                 * @return

        """
        pass

    def get_labels_count(self) -> int:                     # overridable (pure virtual)
        """*
                 * Returns number of different labels combinations.

        """
        pass

    def __init__(self) -> None:
        """Autogenerated default constructor"""
        pass

class MorphInterpretation:
    """*
         The result of analysis is  a directed acyclic graph with numbered
         nodes representing positions  in text (points _between_ segments)
         and edges representing interpretations of segments that span from
         one node to another.  E.g.,

             {0,1,"ja","ja","ppron12:sg:nom:m1.m2.m3..n1.n2:pri"}
             |
             |      {1,2,"został","zostać","praet:sg:m1.m2.m3:perf"}
             |      |
           __|  ____|   __{2,3,"em","być","aglt:sg:pri:imperf:wok"}
          /  \ /     \ / \
         * Ja * został*em *
         0    1       2   3

         Note that the word 'zostałem' got broken into 2 separate segments.
         * One MorphInterpretation instance describes one edge of this DAG.

    """

    def __init__(self) -> None:
        pass

    @staticmethod
    def create_ign(
        start_node: int,
        end_node: int,
        orth: str,
        lemma: str
        ) -> MorphInterpretation:
        """*
                 * Creates new instance with "ign" tag (meaning: "not found in the dictionary")

        """
        pass

    @staticmethod
    def create_whitespace(
        start_node: int,
        end_node: int,
        orth: str
        ) -> MorphInterpretation:
        """*
                 * Creates new instance with "sp" tag (meaning: "this is a sequence of whitespaces")

        """
        pass

    def is_ign(self) -> bool:
        """*
                 *
                 * @return True iff this instance represents an unknown word.

        """
        pass

    def is_whitespace(self) -> bool:
        """*
                 *
                 * @return True iff this instance represents a whitespace.

        """
        pass

    def get_tag(self, morfeusz: Morfeusz) -> str:
        """*
                 * Get tag as string.
                 *
                 * @param morfeusz Morfeusz instance this interpretation was created by.
                 * @return

        """
        pass

    def get_name(self, morfeusz: Morfeusz) -> str:
        """*
                 * Get name as string.
                 *
                 * @param morfeusz Morfeusz instance this interpretation was created by.
                 * @return

        """
        pass

    def get_labels_as_string(self, morfeusz: Morfeusz) -> str:
        """*
                 * Get labels as string.
                 *
                 * @param morfeusz Morfeusz instance this interpretation was created by.
                 * @return

        """
        pass

    def get_labels(self, morfeusz: Morfeusz) -> std.set<str>:
        """*
                 * Get tag as set of strings.
                 *
                 * @param morfeusz Morfeusz instance this interpretation was created by.
                 * @return

        """
        pass

    start_node: int
    end_node: int
    orth: str
    lemma: str
    tag_id: int
    name_id: int
    labels_id: int

class MorfeuszException:

    def __init__(self, what: str) -> None:
        pass



class FileFormatException(MorfeuszException):

    def __init__(self, what: str) -> None:
        pass


# #endif

####################    </generated_from:morfeusz2.h>    ####################

# </litgen_stub> // Autogenerated code end!
